#!/system/bin/sh
magisk_busybox="/data/adb/magisk/busybox"

bin_name="helper"
bin_path="/data/xray/bin/${bin_name}"
data_path="/data/xray"
run_path="${data_path}/run"
pid_file="${run_path}/${bin_name}.pid"
error_log="${run_path}/helper.log"
conf_file="${data_path}/config.json"
bin_opts=""
inet_uid="3003"

probe_helper_alive() {
  [ -f ${pid_file} ] && cmd_file="/proc/`cat ${pid_file}`/cmdline" || return 1
  [ -f ${cmd_file} ] && grep -q ${bin_path} ${cmd_file} && return 0 || return 1
}

display_helper_pid() {
  if probe_helper_alive ; then
    echo "[Info]: ${bin_name} service is running. ( PID: `cat ${pid_file}` )"
    return 0
  else
    echo "[Info]: ${bin_name} service is stopped."
    return 1
  fi
}

find_netstat_path() {
  [ -f /system/bin/netstat ] && alias netstat="/system/bin/netstat" && return 0
  [ -f /system/xbin/netstat ] && alias netstat="/system/xbin/netstat" && return 0
  return 1
}

wait_helper_listen() {
  wait_count=0
  helper_pid=`cat ${pid_file}`
  find_netstat_path && \
  check_helper_cmd="netstat -tnlp | grep -q helper" || \
  check_helper_cmd="ls -lh /proc/${helper_pid}/fd | grep -q socket"
  while probe_helper_alive && ! eval "${check_helper_cmd}" && [ ${wait_count} -lt 100 ] ; do
    sleep 1 ; wait_count=$((${wait_count} + 1))
  done
  if probe_helper_alive && eval "${check_helper_cmd}" ; then
    return 0
  else
    return 1
  fi
}

start_service() {
  export XRAY_HELPER_CONFIG_PATH=${data_path}
  if probe_helper_alive ; then
    echo "[Info]: ${bin_name} service is running. ( PID: `cat ${pid_file}` )"
    return 0
  elif [ -f ${conf_file} ] ; then
    echo "[Info]: Starting ${bin_name} service."
    mkdir -p ${run_path}
    chown -R root:inet ${data_path}
    chown root:inet ${bin_path}
    chmod 6755 ${bin_path}
    ulimit -SHn 1000000
    nohup ${magisk_busybox} setuidgid 0:${inet_uid} ${bin_path} ${bin_opts} &>${error_log} &
    echo -n $! > ${pid_file}
    if wait_helper_listen ; then
      echo "[Info]: ${bin_name} service is running. ( PID: `cat ${pid_file}` )"
      return 0
    else
      if probe_helper_alive ; then
        echo "[Warning]: ${bin_name} service is running but may not listening. ( PID: `cat ${pid_file}` )"
        return 0
      else
        echo "[Error]: Start ${bin_name} service Failed."
        rm -f ${pid_file}
        return 1
      fi
    fi
  else
    return 2
  fi
}

stop_service() {
  if display_helper_pid ; then
    echo "[Info]: Stopping ${bin_name} service."
    kill `cat ${pid_file}`
    sleep 1
    display_helper_pid
  fi
  rm -f ${pid_file}
}

case "$1" in
  start)
    start_service
    ;;
  stop)
    stop_service
    ;;
  restart)
    stop_service
    start_service
    ;;
  status)
    display_helper_pid
    ;;
  *)
    echo "$0:  usage:  $0 {start|stop|restart|status}"
    ;;
esac
