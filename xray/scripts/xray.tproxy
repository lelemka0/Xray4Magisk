#!/system/bin/sh

dnsmasq_uid="1052"
table_id="100"
inet_uid="3003"
net_raw_uid="3004"
dns_port="65533"
proxy_port="65535"
mark_id="1"
table_file="/data/misc/net/rt_tables"
appid_file="/data/xray/appid.list"
proxy_mode="none"
appid_list=()
iptables="iptables"
intranet=(0.0.0.0/8 10.0.0.0/8 100.64.0.0/10 127.0.0.0/8 169.254.0.0/16 172.16.0.0/12 192.0.0.0/24 192.0.2.0/24 192.88.99.0/24 192.168.0.0/16 198.18.0.0/15 198.51.100.0/24 203.0.113.0/24 224.0.0.0/4 240.0.0.0/4 255.255.255.255/32)
intranet6=(::/128 ::1/128 ::ffff:0:0/96 100::/64 64:ff9b::/96 2001::/32 2001:10::/28 2001:20::/28 2001:db8::/32 2002::/16 fc00::/7 fe80::/10 ff00::/8)

find_ip_path() {
  [ -f /system/bin/ip ] && alias ip="/system/bin/ip" && return 0
  [ -f /system/xbin/ip ] && alias ip="/system/xbin/ip" && return 0
  return 1
}

find_netstat_path() {
  [ -f /system/bin/netstat ] && alias netstat="/system/bin/netstat" && return 0
  [ -f /system/xbin/netstat ] && alias netstat="/system/xbin/netstat" && return 0
  return 1
}

add_route() {
	ip rule add fwmark ${mark_id} table ${table_id}
	ip route add local 0.0.0.0/0 dev lo table ${table_id}
    if [ -f /data/xray/ipv6 ] ; then
        ip -6 rule add fwmark ${mark_id} table ${table_id}
	    ip -6 route add local ::/0 dev lo table ${table_id}
    fi
}

del_route() {
	ip rule del fwmark ${mark_id} table ${table_id}
	ip route flush table ${table_id}
    if [ -f /data/xray/ipv6 ] ; then
        ip -6 rule del fwmark ${mark_id} table ${table_id}
	    ip -6 route flush table ${table_id}
    fi
}

create_mangle_iptables() {
  echo "[Info]: creating mangle chain"
    ${iptables} -t mangle -N XRAY

    if [ "${iptables}" = "ip6tables" ] ; then
        for subnet6 in ${intranet6[@]} ; do
            ${iptables} -t mangle -A XRAY -d ${subnet6} -j RETURN
        done
    else
        for subnet in ${intranet[@]} ; do
            ${iptables} -t mangle -A XRAY -d ${subnet} -j RETURN
        done
    fi

    # bypass 53
    # ${iptables} -t mangle -A XRAY -p tcp ! --dport 53 -j TPROXY --on-port ${proxy_port} --tproxy-mark ${mark_id}
    # ${iptables} -t mangle -A XRAY -p udp ! --dport 53 -j TPROXY --on-port ${proxy_port} --tproxy-mark ${mark_id}

    # mark all traffic
    ${iptables} -t mangle -A XRAY -p tcp -j TPROXY --on-port ${proxy_port} --tproxy-mark ${mark_id}
    ${iptables} -t mangle -A XRAY -p udp -j TPROXY --on-port ${proxy_port} --tproxy-mark ${mark_id}

    ${iptables} -t mangle -A PREROUTING -j XRAY

    # create_dns_iptables
    create_proxy_iptables
}

create_proxy_iptables() {
  echo "[Info]: creating proxy"
    ${iptables} -t mangle -N PROXY

    if [ "${iptables}" = "ip6tables" ] ; then
        for subnet6 in ${intranet6[@]} ; do
            ${iptables} -t mangle -A PROXY -d ${subnet6} -j RETURN
        done
    else
        for subnet in ${intranet[@]} ; do
            ${iptables} -t mangle -A PROXY -d ${subnet} -j RETURN
        done
    fi

    # ${iptables} -t mangle -A PROXY -m owner --gid-owner ${net_raw_uid} -j RETURN
    ${iptables} -t mangle -A PROXY -m owner --gid-owner ${inet_uid} -j RETURN

    probe_proxy_mode

    if [ "${proxy_mode}" = "ALL" ] ; then
        ${iptables} -t mangle -A PROXY -j MARK --set-mark ${mark_id}
    elif [ "${proxy_mode}" = "skip" ] ; then
        for appid in ${appid_list[@]} ; do
            ${iptables} -t mangle -I PROXY -m owner --uid-owner ${appid} -j RETURN
        done
        ${iptables} -t mangle -A PROXY -j MARK --set-mark ${mark_id}
    elif [ "${proxy_mode}" = "pick" ] ; then
        for appid in ${appid_list[@]} ; do
            ${iptables} -t mangle -A PROXY -m owner --uid-owner ${appid} -j MARK --set-mark ${mark_id}
        done
    fi

    ${iptables} -t mangle -A OUTPUT -j PROXY
}

flush_iptables() {
    echo "[Info]: flush iptables"
    ${iptables} -t mangle -D OUTPUT -j PROXY
    ${iptables} -t mangle -D PREROUTING -j XRAY
    ${iptables} -t mangle -F PROXY
    ${iptables} -t mangle -F XRAY
    ${iptables} -t mangle -X PROXY
    ${iptables} -t mangle -X XRAY
    # flush_dns_iptables
}

probe_proxy_mode() {
    echo "" >> ${appid_file}
    sed -i '/^$/d' "${appid_file}"
    if [ -f "${appid_file}" ] ; then
        first_line=$(head -1 ${appid_file})
        if [ "${first_line}" = "ALL" ] ; then
            proxy_mode=ALL
        elif [ "${first_line}" = "bypass" ] ; then
            proxy_mode=skip
        else
            proxy_mode=pick
        fi
    fi

    while read appid_line ; do
        appid_text=(`echo ${appid_line}`)
        for appid_word in ${appid_text[*]} ; do
            if [ "${appid_word}" = "bypass" ] ; then
                break
            else
                appid_list=(${appid_list[*]} ${appid_word})
            fi
        done
    done < ${appid_file}
    # echo ${appid_list[*]}
}

create_dns_iptables() {
    if [ "${iptables}" != "ip6tables" ] ; then
        echo "[Info]: Create DNS proxy iptables rules."
        ${iptables} -t nat -N DNS
        ${iptables} -t nat -A DNS -m owner --gid-owner ${inet_uid} -j RETURN
        ${iptables} -t nat -A DNS -p tcp --dport 53 -j REDIRECT --to-port ${dns_port}
        ${iptables} -t nat -A DNS -p udp --dport 53 -j REDIRECT --to-port ${dns_port}
        ${iptables} -t nat -A OUTPUT -j DNS
    fi
}

flush_dns_iptables() {
    if [ "${iptables}" != "ip6tables" ] ; then
        echo "[Info]: Clean DNS proxy iptables rules."
        ${iptables} -t nat -D OUTPUT -j DNS
        ${iptables} -t nat -F DNS
        ${iptables} -t nat -X DNS
    fi
}

disable_proxy() {
    del_route
    iptables="iptables"
    flush_iptables 2> /dev/null
	if [ -f /data/xray/ipv6 ] ; then
        iptables="ip6tables"
        flush_iptables 2> /dev/null
    fi
}

enable_proxy() {
    add_route
    iptables="iptables"
    create_mangle_iptables
	if [ -f /data/xray/ipv6 ] ; then
        iptables="ip6tables"
        create_mangle_iptables
    fi
}

case "$1" in
  enable)
    disable_proxy
    enable_proxy
    ;;
  disable)
    disable_proxy
    ;;
  renew)
    disable_proxy
    enable_proxy
    ;;
  *)
    echo "$0:  usage:  $0 {enable|disable|renew}"
    ;;
esac
